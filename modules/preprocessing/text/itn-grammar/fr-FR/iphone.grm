import '../../fst-thrax-grammars/common/byte.grm' as bytelib;
import '../../fst-thrax-grammars/common/chars.grm' as chars;

star = Optimize[bytelib.kBytes*];

digit = Optimize[bytelib.kDigit];
not_digit = Optimize[bytelib.kBytes - bytelib.kDigit];
not_zero = Optimize[bytelib.kDigit - "0"];

space = Optimize[" "];

lbnd = Optimize[(not_digit space) | "[BOS]"];
rbnd = Optimize[(space not_digit) | "[EOS]"];

hyphen = Optimize["tiret""s"?];
hyphen_symbol = Optimize["-"];

plus = Optimize["plus"];
plus_symbol = Optimize["+"];

########################################## Transducer ##########################################

del_space = Optimize[space : ""];
ins_space = Optimize["" : space];
to_hyphen_symb = Optimize[hyphen : hyphen_symbol];
to_plus_symb = Optimize[plus : plus_symbol];

country_code_separator = Optimize[(del_space to_hyphen_symb del_space)|hyphen_symbol|space|ins_space];

country_code_2_digits = Optimize[not_zero del_space? digit];
country_code_3_digits = Optimize[not_zero del_space? digit del_space? digit];
country_code_4_digits = Optimize["1" country_code_separator country_code_3_digits];
country_code = Optimize[country_code_2_digits|country_code_3_digits|country_code_4_digits];

double_zero = Optimize[("0" del_space? "0")|("double z√©ro":"00")];



#13 digits with leading country code	00 XX C CC CC CC CC
tr_13_digits_leading_country_code = Optimize[double_zero (space|ins_space) country_code (ins_space|space) digit ((ins_space|space) digit del_space? digit){4}];

#13 digits with leading country code and 8 on 5th position	00 XX 8CC CC CC CC
tr_13_digits_leading_country_code_8_on_5th_position = Optimize[double_zero (space|ins_space) country_code (ins_space|space) "8" del_space? digit del_space? digit ((ins_space|space) digit del_space? digit){3}];

#12 digits with leading country code	00 XX C CC CC CC C
#tr_12_digits_with_leading_country_code = Optimize[double_zero (space|ins_space) country_code (ins_space|space) digit ((ins_space|space) digit del_space? digit){3} (ins_space|space) digit];

#12 digits with 8 on 5th position	00 XX 8CC CC CC C
#tr_12_digits_leading_country_code_8_on_5th_position = Optimize[double_zero (space|ins_space) country_code (ins_space|space) "8" del_space? digit del_space? digit ((ins_space|space) digit del_space? digit){2} (ins_space|space) digit];

#11 digits with leading country code and plus	+XX C CC CC CC CC
tr_11_digits_with_leading_country_code_and_plus = Optimize[to_plus_symb del_space? country_code (ins_space|space) digit ((ins_space|space) digit del_space? digit){4}];

#10 digits	0CCCCCCCCC
tr_10_digits = Optimize["0" del_space? not_zero (del_space? digit){8}];


########################################### Rewrite ############################################

rw_13_digits_leading_country_code = Optimize[CDRewrite[tr_13_digits_leading_country_code, lbnd, rbnd, star]];
rw_13_digits_leading_country_code_8_on_5th_position = Optimize[CDRewrite[tr_13_digits_leading_country_code_8_on_5th_position, lbnd, rbnd, star]];
#rw_12_digits_with_leading_country_code = Optimize[CDRewrite[tr_12_digits_with_leading_country_code, lbnd, rbnd, star]];
#rw_12_digits_leading_country_code_8_on_5th_position = Optimize[CDRewrite[tr_12_digits_leading_country_code_8_on_5th_position, lbnd, rbnd, star]];
rw_11_digits_with_leading_country_code_and_plus = Optimize[CDRewrite[tr_11_digits_with_leading_country_code_and_plus, lbnd, rbnd, star]];
rw_10_digits = Optimize[CDRewrite[tr_10_digits, lbnd, rbnd, star]];

################################################################################################


############################################ Export ############################################

export MAIN = Optimize[rw_13_digits_leading_country_code
		     @ rw_13_digits_leading_country_code_8_on_5th_position
		     @ rw_11_digits_with_leading_country_code_and_plus
		     @ rw_10_digits];

################################################################################################

